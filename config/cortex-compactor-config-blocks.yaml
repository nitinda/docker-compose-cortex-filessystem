# Comma-separated list of Cortex modules to load. The alias 'all' can be used in
# the list to load a number of core modules and will enable single-binary mode.
# Use '-modules' command line flag to get a list of available modules, and to
# see which modules are included in 'all'.
# CLI flag: -target
target: "compactor"

# Disable the requirement that every request to Cortex has a
# X-Scope-OrgID header. `fake` will be substituted in instead.
auth_enabled: false

# The server_config configures the HTTP and gRPC server of the launched
# service(s).
server:  
  # HTTP server listen port.
  # CLI flag: -server.http-listen-port
  http_listen_port: 9009

  # Only log messages with the given severity or above. Valid levels: [debug, info, warn, error]
  # CLI flag: -log.level
  log_level: "error"

  # Output log messages in the given format. Valid formats: [logfmt, json]
  # CLI flag: -log.format
  log_format: "json"

  # Configure the server to allow messages up to 100MB.
  grpc_server_max_recv_msg_size: 104857600
  grpc_server_max_send_msg_size: 104857600
  grpc_server_max_concurrent_streams: 1000

# The storage_config configures where Cortex stores the data (chunks storage engine).
storage:
  engine: blocks

# This configures how the querier and store-gateway discover and synchronize
# blocks stored in the bucket.
blocks_storage:
  tsdb:
    # Local directory to store TSDBs in the ingesters.
    # CLI flag: -blocks-storage.tsdb.dir
    dir: /data/cortex/tsdb
  
    # Enables support for exemplars in TSDB and sets the maximum number that will
    # be stored. 0 or less means disabled.
    # CLI flag: -blocks-storage.tsdb.max-exemplars
    max_exemplars: 20

  # Directory to store synchronized TSDB index headers.
  # CLI flag: -blocks-storage.bucket-store.sync-dir
  bucket_store:
    sync_dir: /data/cortex/tsdb-sync

  # # You can choose between local storage and Amazon S3, Google GCS and Azure storage. Each option requires additional configuration
  # # as shown below. All options can be configured via flags as well which might be handy for secret inputs.
  backend: filesystem # s3, gcs, azure or filesystem are valid options
  filesystem:
    dir: /data/cortex/tsdb

# The compactor_config configures the compactor for the blocks storage.
compactor:
  # Data directory in which to cache blocks and process compactions
  # CLI flag: -compactor.data-dir
  data_dir: /data/cortex/compactor

  # Shard tenants across multiple compactor instances. Sharding is required if you
  # run multiple compactor instances, in order to coordinate compactions and avoid
  # race conditions leading to the same tenant blocks simultaneously compacted by
  # different instances.
  # CLI flag: -compactor.sharding-enabled
  sharding_ring:
    kvstore:
      # Backend storage to use for the ring. Supported values are: consul, etcd, inmemory, memberlist, multi.
      # CLI flag: -compactor.ring.store
      store: consul

      # The prefix for the keys in the store. Should end with a /.
      # CLI flag: -compactor.ring.prefix
      prefix: "collectors/compactor/"

      # The consul_config configures the consul client.
      # The CLI flags prefix for this block config is: compactor.ring
      consul:
        # Hostname and port of Consul.
        # CLI flag: -<prefix>.consul.hostname
        host: 192.168.56.101:8500